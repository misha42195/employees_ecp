from datetime import datetime, timedelta
from pyexpat.errors import messages

from crud.ecpies import get_expiring_ecp
from crud.employees import get_employees_with_expiring_licenses
from crud.kriptoproies import get_expiring_kripropro



def create_notification() -> str:
    employees_with_objects = get_employees_with_expiring_licenses()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    messages = []
    for employee, ecps, kriptos in employees_with_objects:
        employee_message = [f"üî¥‚ö†Ô∏è–°–æ—Ç—Ä—É–¥–Ω–∏–∫: {employee.full_name}"]

        for ecp in ecps:
            days_left = (ecp.finish_date - datetime.now().date()).days
            employee_message.append(
                f"  ECP –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è: {ecp.finish_date.strftime('%Y-%m-%d')}, –æ—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω–µ–π"
            )

        for kripto in kriptos:
            days_left = (kripto.finish_date - datetime.now().date()).days
            employee_message.append(
                f"  Kriptos –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è: {kripto.finish_date.strftime('%Y-%m-%d')}, –æ—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω–µ–π"
            )

        messages.append("\n".join(employee_message))

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–¥–Ω–æ
    return "\n\n".join(messages)

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
# notification_message = create_notification()
# print(notification_message)
